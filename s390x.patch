diff --git a/configure b/configure
index 728c2a6..f3456db 100755
--- a/configure
+++ b/configure
@@ -84,6 +84,8 @@ configure () {
         arm*)
             var_append LDFLAGS -ldl
             final_warning="ARM support is still experimental" ;;
+        s390x)
+            final_warning="s390x support is still experimental" ;;
         *)
             error "unsupported architecture: $MACHINE"
     esac
diff --git a/mk/support/pkg/v8.sh b/mk/support/pkg/v8.sh
index dc339ad..87aec74 100644
--- a/mk/support/pkg/v8.sh
+++ b/mk/support/pkg/v8.sh
@@ -42,6 +42,7 @@ pkg_install () {
         i?86)   arch=ia32 ;;
         x86_64) arch=x64 ;;
         arm*)   arch=arm; arch_gypflags=$raspberry_pi_gypflags ;;
+        s390x)  arch=s390x ;;
         *)      arch=native ;;
     esac
     mode=release
diff --git a/src/arch/runtime/context_switching.cc b/src/arch/runtime/context_switching.cc
index d729575..7e954d3 100644
--- a/src/arch/runtime/context_switching.cc
+++ b/src/arch/runtime/context_switching.cc
@@ -98,7 +98,7 @@ artificial_stack_t::artificial_stack_t(void (*initial_fun)(void), size_t _stack_
     the stack by swapcontext; they're callee-saved, so whatever happens to be in
     them will be ignored. */
     sp -= 6;
-#elif defined(__arm__)
+#elif defined(__arm__) || defined(__s390x__)
     /* We must preserve r4, r5, r6, r7, r8, r9, r10, and r11. Because we have to store the LR (r14) in swapcontext as well, we also store r12 in swapcontext to keep the stack double-word-aligned. However, we already accounted for both of those by decrementing sp twice above (once for r14 and once for r12, say). */
     sp -= 8;
 #else
@@ -262,7 +262,7 @@ void context_switch(artificial_stack_context_ref_t *current_context_out, artific
 }
 
 asm(
-#if defined(__i386__) || defined(__x86_64__) || defined(__arm__)
+#if defined(__i386__) || defined(__x86_64__) || defined(__arm__) || defined(__s390x__)
 // We keep the i386, x86_64, and ARM stuff interleaved in order to enforce commonality.
 #if defined(__x86_64__)
 #if defined(__LP64__) || defined(__LLP64__)
@@ -281,6 +281,7 @@ asm(
     /* `current_pointer_out` is in `%rdi`. `dest_pointer` is in `%rsi`. */
 #elif defined(__arm__)
     /* `current_pointer_out` is in `r0`. `dest_pointer` is in `r1` */
+#elif defined(__s390x__)
 #endif
 
     /* Save preserved registers (the return address is already on the stack). */
@@ -302,6 +303,8 @@ asm(
     "push {r12}\n"
     "push {r14}\n"
     "push {r4-r11}\n"
+#elif defined(__s390x__)
+    ""
 #endif
 
     /* Save old stack pointer. */
@@ -316,6 +319,8 @@ asm(
 #elif defined(__arm__)
     /* On ARM, the first argument is in `r0`. `r13` is the stack pointer. */
     "str r13, [r0]\n"
+#elif defined(__s390x__)
+    ""
 #endif
 
     /* Load the new stack pointer and the preserved registers. */
@@ -330,6 +335,8 @@ asm(
 #elif defined(__arm__)
     /* On ARM, the second argument is in `r1` */
     "mov r13, r1\n"
+#elif defined(__s390x__)
+    ""
 #endif
 
 #if defined(__i386__)
@@ -348,6 +355,8 @@ asm(
     "pop {r4-r11}\n"
     "pop {r14}\n"
     "pop {r12}\n"
+#elif defined(__s390x__)
+    ""
 #endif
 
 #if defined(__i386__) || defined(__x86_64__)
@@ -360,6 +369,8 @@ asm(
     /* Above, we popped `LR` (`r14`) off the stack, so the bx instruction will
     jump to the correct return address. */
     "bx r14\n"
+#elif defined(__s390x__)
+    ""
 #endif
 
 #else
diff --git a/src/build.mk b/src/build.mk
index c8b16e5..b116e76 100644
--- a/src/build.mk
+++ b/src/build.mk
@@ -53,7 +53,7 @@ else ifeq ($(COMPILER),INTEL)
 else ifeq ($(COMPILER),GCC)
 
   ifeq ($(OS),Linux)
-    RT_LDFLAGS += -Wl,--no-as-needed
+    RT_LDFLAGS += -lv8_base -lv8_libbase -lv8_libplatform -lv8_nosnapshot -lv8_snapshot -licui18n -licuuc -ldl -Wl,--no-as-needed
   endif
 
   ifeq ($(STATICFORCE),1)
diff --git a/src/client_protocol/json.cc b/src/client_protocol/json.cc
index 07080ad..a7ff281 100644
--- a/src/client_protocol/json.cc
+++ b/src/client_protocol/json.cc
@@ -55,6 +55,11 @@ scoped_ptr_t<ql::query_params_t> json_protocol_t::parse_query(
     conn->read_buffered(&size, sizeof(size), interruptor);
     ql::response_t error;
 
+    if (is_bigendian()) {
+        token = __builtin_bswap64(token);
+        size = __builtin_bswap32(size);
+    }
+
     if (size >= wire_protocol_t::TOO_LARGE_QUERY_SIZE) {
         error.fill_error(Response::CLIENT_ERROR,
                          Response::RESOURCE_LIMIT,
@@ -226,16 +231,21 @@ void json_protocol_t::send_response(ql::response_t *response,
 
     // Fill in the token and size
     char *mutable_buffer = buffer.GetMutableBuffer();
+    if (is_bigendian()){
+        token=__builtin_bswap64(token);
+    }
     for (size_t i = 0; i < sizeof(token); ++i) {
         mutable_buffer[i] = reinterpret_cast<const char *>(&token)[i];
     }
 
     data_size = static_cast<uint32_t>(payload_size);
+    if (is_bigendian()){
+        data_size=__builtin_bswap32(data_size);
+    }
     for (size_t i = 0; i < sizeof(data_size); ++i) {
         mutable_buffer[i + sizeof(token)] =
             reinterpret_cast<const char *>(&data_size)[i];
     }
-
     conn->write(buffer.GetString(), buffer.GetSize(), interruptor);
 }
 
diff --git a/src/client_protocol/server.cc b/src/client_protocol/server.cc
index bf8fce5..e7cab7c 100644
--- a/src/client_protocol/server.cc
+++ b/src/client_protocol/server.cc
@@ -37,6 +37,7 @@
 #include "rdb_protocol/env.hpp"
 #include "rpc/semilattice/view.hpp"
 #include "time.hpp"
+#include "utils.hpp"
 
 #include "rdb_protocol/ql2.pb.h"
 #include "rdb_protocol/query_server.hpp"
@@ -280,6 +281,9 @@ void query_server_t::handle_conn(const scoped_ptr_t<tcp_conn_descriptor_t> &ncon
         int32_t client_magic_number;
         conn->read_buffered(
             &client_magic_number, sizeof(client_magic_number), &ct_keepalive);
+        if (is_bigendian()){
+            client_magic_number = __builtin_bswap32(client_magic_number);
+        }
 
         switch (client_magic_number) {
             case VersionDummy::V0_1:
@@ -315,6 +319,9 @@ void query_server_t::handle_conn(const scoped_ptr_t<tcp_conn_descriptor_t> &ncon
 
             uint32_t auth_key_size;
             conn->read_buffered(&auth_key_size, sizeof(uint32_t), &ct_keepalive);
+            if (is_bigendian()) {
+                auth_key_size = __builtin_bswap32(auth_key_size);
+            }
             if (auth_key_size > 2048) {
                 throw client_protocol::client_server_error_t(
                     -1, "Client provided an authorization key that is too long.");
@@ -740,6 +747,9 @@ void query_server_t::handle(const http_req_t &req,
     json_protocol_t::write_response_to_buffer(&response, &buffer);
 
     uint32_t size = static_cast<uint32_t>(buffer.GetSize());
+    if (is_bigendian()) {
+        size = __builtin_bswap32(size);
+    }
     char header_buffer[sizeof(token) + sizeof(size)];
     memcpy(&header_buffer[0], &token, sizeof(token));
     memcpy(&header_buffer[sizeof(token)], &size, sizeof(size));
diff --git a/src/perfmon/perfmon.cc b/src/perfmon/perfmon.cc
index 276d8ac..6989683 100644
--- a/src/perfmon/perfmon.cc
+++ b/src/perfmon/perfmon.cc
@@ -159,7 +159,7 @@ stddev_t::stddev_t()
 stddev_t::stddev_t(size_t n, double mean, double variance)
     : N(n), M(mean), Q(variance * n) {
     if (N == 0)
-        rassert(isnan(M) && isnan(Q));
+        rassert(std::isnan(M) && std::isnan(Q));
 }
 
 void stddev_t::add(double value) {
diff --git a/src/rdb_protocol/datum.cc b/src/rdb_protocol/datum.cc
index 7fbd7aa..9992ee2 100644
--- a/src/rdb_protocol/datum.cc
+++ b/src/rdb_protocol/datum.cc
@@ -1118,9 +1118,11 @@ std::string datum_t::mangle_secondary(
 std::string datum_t::encode_tag_num(uint64_t tag_num) {
     static_assert(sizeof(tag_num) == tag_size,
             "tag_size constant is assumed to be the size of a uint64_t.");
+/*
 #ifndef BOOST_LITTLE_ENDIAN
     static_assert(false, "This piece of code will break on big-endian systems.");
 #endif
+*/
     return std::string(reinterpret_cast<const char *>(&tag_num), tag_size);
 }
 
@@ -1244,9 +1246,9 @@ components_t parse_secondary(const std::string &key) THROWS_NOTHING {
     std::string tag_str = key.substr(start_of_tag, key.size() - (start_of_tag + 2));
     boost::optional<uint64_t> tag_num;
     if (tag_str.size() != 0) {
-#ifndef BOOST_LITTLE_ENDIAN
+/*#ifndef BOOST_LITTLE_ENDIAN
         static_assert(false, "This piece of code will break on little endian systems.");
-#endif
+#endif*/
         tag_num = *reinterpret_cast<const uint64_t *>(tag_str.data());
     }
     return components_t{
diff --git a/src/rpc/connectivity/cluster.cc b/src/rpc/connectivity/cluster.cc
index b43f7ab..f907806 100644
--- a/src/rpc/connectivity/cluster.cc
+++ b/src/rpc/connectivity/cluster.cc
@@ -103,7 +103,7 @@ static bool resolve_protocol_version(const std::string &remote_version_string,
     return false;
 }
 
-#if defined (__x86_64__) || defined (_WIN64)
+#if defined (__x86_64__) || defined (_WIN64) || defined (__s390x__)
 const std::string connectivity_cluster_t::cluster_arch_bitsize("64bit");
 #elif defined (__i386__) || defined(__arm__)
 const std::string connectivity_cluster_t::cluster_arch_bitsize("32bit");
